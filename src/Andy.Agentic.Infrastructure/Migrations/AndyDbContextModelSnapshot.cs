// <auto-generated />
using System;
using Andy.Agentic.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Andy.Agentic.Infrastructure.Migrations
{
    [DbContext(typeof(AndyDbContext))]
    partial class AndyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.AgentDocumentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("AgentId", "DocumentId")
                        .IsUnique();

                    b.ToTable("AgentDocuments");
                });

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.AgentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("EmbeddingLlmConfigId")
                        .HasColumnType("uuid");

                    b.Property<int>("ExecutionCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LlmConfigId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EmbeddingLlmConfigId");

                    b.HasIndex("LlmConfigId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.AgentMcpServerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Capabilities")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.ToTable("AgentMcpServers");
                });

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.AgentTagEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("TagId");

                    b.ToTable("AgentTags");
                });

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.AgentToolEntity", b =>
                {
                    b.Property<Guid>("AgentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToolId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AgentId", "ToolId");

                    b.HasIndex("ToolId");

                    b.ToTable("AgentTools");
                });

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.ChatMessageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AgentId")
                        .HasColumnType("uuid");

                    b.Property<string>("AgentName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsToolExecution")
                        .HasColumnType("boolean");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SessionId")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TokenCount")
                        .HasColumnType("integer");

                    b.Property<string>("ToolName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ToolResult")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.DocumentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("BinaryContent")
                        .HasColumnType("LONGBLOB");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRagProcessed")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.LlmConfigEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<double?>("FrequencyPenalty")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<int?>("MaxTokens")
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double?>("PresencePenalty")
                        .HasColumnType("double precision");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<double?>("Temperature")
                        .HasColumnType("double precision");

                    b.Property<double?>("TopP")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("LlmConfigs");
                });

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.McpServerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Capabilities")
                        .HasColumnType("text");

                    b.Property<string>("Configuration")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Protocol")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("McpServerEntity");
                });

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.PromptEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.ToTable("Prompts");
                });

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.PromptVariableEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("PromptId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("PromptId");

                    b.ToTable("PromptVariables");
                });

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.TagEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.ToolEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Authentication")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Configuration")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Headers")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Parameters")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.ToolExecutionLogEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AgentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChatMessageEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("ExecutedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("ExecutionTime")
                        .HasColumnType("double precision");

                    b.Property<string>("Parameters")
                        .HasColumnType("text");

                    b.Property<string>("Result")
                        .HasColumnType("text");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("Success")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ToolId")
                        .HasColumnType("uuid");

                    b.Property<string>("ToolName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("ChatMessageEntityId");

                    b.HasIndex("ToolId");

                    b.HasIndex("UserId");

                    b.ToTable("ToolExecutionLogs");
                });

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AzureAdId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Department")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("AzureAdId")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.AgentDocumentEntity", b =>
                {
                    b.HasOne("Andy.Agentic.Domain.Entities.AgentEntity", "Agent")
                        .WithMany("AgentDocuments")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Andy.Agentic.Domain.Entities.DocumentEntity", "Document")
                        .WithMany("AgentDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.AgentEntity", b =>
                {
                    b.HasOne("Andy.Agentic.Domain.Entities.UserEntity", "CreatedByUser")
                        .WithMany("Agents")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Andy.Agentic.Domain.Entities.LlmConfigEntity", "EmbeddingLlmConfig")
                        .WithMany()
                        .HasForeignKey("EmbeddingLlmConfigId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Andy.Agentic.Domain.Entities.LlmConfigEntity", "LlmConfig")
                        .WithMany()
                        .HasForeignKey("LlmConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("EmbeddingLlmConfig");

                    b.Navigation("LlmConfig");
                });

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.AgentMcpServerEntity", b =>
                {
                    b.HasOne("Andy.Agentic.Domain.Entities.AgentEntity", "Agent")
                        .WithMany("McpServers")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.AgentTagEntity", b =>
                {
                    b.HasOne("Andy.Agentic.Domain.Entities.AgentEntity", "Agent")
                        .WithMany("AgentTags")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Andy.Agentic.Domain.Entities.TagEntity", "Tag")
                        .WithMany("AgentTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.AgentToolEntity", b =>
                {
                    b.HasOne("Andy.Agentic.Domain.Entities.AgentEntity", "Agent")
                        .WithMany("Tools")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Andy.Agentic.Domain.Entities.ToolEntity", "Tool")
                        .WithMany()
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.ChatMessageEntity", b =>
                {
                    b.HasOne("Andy.Agentic.Domain.Entities.AgentEntity", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Andy.Agentic.Domain.Entities.UserEntity", "User")
                        .WithMany("ChatMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Agent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.DocumentEntity", b =>
                {
                    b.HasOne("Andy.Agentic.Domain.Entities.UserEntity", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.LlmConfigEntity", b =>
                {
                    b.HasOne("Andy.Agentic.Domain.Entities.UserEntity", "CreatedByUser")
                        .WithMany("LlmConfigs")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.PromptEntity", b =>
                {
                    b.HasOne("Andy.Agentic.Domain.Entities.AgentEntity", "Agent")
                        .WithMany("Prompts")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.PromptVariableEntity", b =>
                {
                    b.HasOne("Andy.Agentic.Domain.Entities.PromptEntity", "Prompt")
                        .WithMany("Variables")
                        .HasForeignKey("PromptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prompt");
                });

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.ToolEntity", b =>
                {
                    b.HasOne("Andy.Agentic.Domain.Entities.UserEntity", "CreatedByUser")
                        .WithMany("Tools")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.ToolExecutionLogEntity", b =>
                {
                    b.HasOne("Andy.Agentic.Domain.Entities.AgentEntity", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Andy.Agentic.Domain.Entities.ChatMessageEntity", null)
                        .WithMany("ToolResults")
                        .HasForeignKey("ChatMessageEntityId");

                    b.HasOne("Andy.Agentic.Domain.Entities.ToolEntity", "Tool")
                        .WithMany()
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Andy.Agentic.Domain.Entities.UserEntity", "User")
                        .WithMany("ToolExecutions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Agent");

                    b.Navigation("Tool");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.AgentEntity", b =>
                {
                    b.Navigation("AgentDocuments");

                    b.Navigation("AgentTags");

                    b.Navigation("McpServers");

                    b.Navigation("Prompts");

                    b.Navigation("Tools");
                });

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.ChatMessageEntity", b =>
                {
                    b.Navigation("ToolResults");
                });

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.DocumentEntity", b =>
                {
                    b.Navigation("AgentDocuments");
                });

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.PromptEntity", b =>
                {
                    b.Navigation("Variables");
                });

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.TagEntity", b =>
                {
                    b.Navigation("AgentTags");
                });

            modelBuilder.Entity("Andy.Agentic.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("Agents");

                    b.Navigation("ChatMessages");

                    b.Navigation("LlmConfigs");

                    b.Navigation("ToolExecutions");

                    b.Navigation("Tools");
                });
#pragma warning restore 612, 618
        }
    }
}
